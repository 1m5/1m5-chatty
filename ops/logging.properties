# Properties file which configures the operation of the JDK
# logging facility.

# The system will look for this config file, first using
# a System property specified at startup:
#
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath
#
# If this property is not specified, then the config file is
# retrieved from its default location at:
#
# JDK_HOME/jre/lib/logging.properties

# Global logging properties.
# ------------------------------------------
# The set of handlers to be loaded upon startup.
# Comma-separated list of class names.
# (? LogManager docs say no comma here, but JDK example has comma.)
handlers = java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Logging levels
# OFF - Turn Off
# SEVERE - Serious Failure
# WARNING - Potentially Unstable
# INFO - Business Process Information
# CONFIG - Configuration Information
# FINE, FINER, FINEST - For troubleshooting in production
# ALL - All messages logged

# Loggers
# ------------------------------------------
# Loggers are usually attached to packages.
# Here, the level for each package is specified.
# The global level is used by default, so levels
# specified here simply act as an override.
#io.onemfive.chatty.Daemon.level = INFO
#io.onemfive.i2p.I2PSensor.level = INFO

# Default global logging level.
# Loggers and Handlers may override this level
.level=INFO

# File Logging
java.util.logging.FileHandler.pattern = 1m5-chatty-%u.log
java.util.logging.FileHandler.limit = 1000000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.level = ALL
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# Console Logging
java.util.logging.ConsoleHandler.level = ALL
java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

